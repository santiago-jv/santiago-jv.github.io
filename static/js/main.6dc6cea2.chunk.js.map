{"version":3,"sources":["components/ListaPokemones.js","App.js","reportWebVitals.js","index.js"],"names":["ListaPokemones","useState","pokemones","setPokemones","nombre","setNombre","pokemon","setPokemon","loading","setLoading","useEffect","a","url","pokemons","json","next","fetch","res","results","forEach","element","poke","name","avatar","sprites","front_default","push","getPokemon","e","className","placeholder","type","onChange","target","value","toLowerCase","src","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gQA0EeA,EAxEQ,WAAO,IAAD,EACOC,mBAAS,IADhB,mBACpBC,EADoB,KACTC,EADS,OAECF,mBAAS,IAFV,mBAEpBG,EAFoB,KAEZC,EAFY,OAGGJ,mBAAS,MAHZ,mBAGpBK,EAHoB,KAGXC,EAHW,OAIGN,oBAAS,GAJZ,mBAIpBO,EAJoB,KAIXC,EAJW,KAM3BC,qBAAU,YACQ,uCAAG,kCAAAC,EAAA,sDACbC,EAAM,uDACNC,EAAW,GACXC,EAAO,CAAEC,KAAM,GAHF,UAIG,MAAbD,EAAKC,KAJK,iCAKCC,MAAMJ,GALP,cAKXK,EALW,gBAMFA,EAAIH,OANF,QAMfA,EANe,QAOVI,QAAQC,QAAb,uCAAqB,WAAOC,GAAP,mBAAAT,EAAA,sEACHK,MAAMI,EAAQR,KADX,cACfK,EADe,gBAEJA,EAAIH,OAFA,OAEjBA,EAFiB,OAIfO,EAAO,CACTC,KAAMF,EAAQE,KACdC,OAAQT,EAAKU,QAAQC,eAEvBZ,EAASa,KAAKL,GARK,2CAArB,uDAUAlB,EAAa,GAAD,mBAAKD,GAAcW,IAE/BD,EAAME,EAAKC,KAEM,MAAbD,EAAKC,MACPN,GAAW,GAtBE,2DAAH,qDA0BhBkB,KACC,IAEHjB,qBAAU,WACRR,EAAUiB,SAAQ,SAACS,GACbA,EAAEN,MAAQlB,GACZG,EAAWqB,QAGd,CAACxB,IAKJ,OACE,eAAC,WAAD,WACEI,GAAY,sBAAKqB,UAAU,mBAAf,UACZ,qBAAKA,UAAU,WACf,2DAGF,sBAAKA,UAAU,YAAf,UAIE,sDAEA,uBACEC,YAAY,qBACZC,KAAK,SACLC,SAnBoB,SAACJ,GACzBvB,EAAUuB,EAAEK,OAAOC,MAAMC,kBAoBX,MAAX7B,GAAmB,4BAAIA,EAAQgB,OACpB,MAAXhB,GAAmB,qBAAK8B,IAAK9B,EAAQiB,gBC3D7Bc,MANf,WACE,OACE,cAAC,EAAD,KCOWC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.6dc6cea2.chunk.js","sourcesContent":["import React, { useState, useEffect, Fragment } from \"react\";\r\n\r\nconst ListaPokemones = () => {\r\n  const [pokemones, setPokemones] = useState([]);\r\n  const [nombre, setNombre] = useState(\"\");\r\n  const [pokemon, setPokemon] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const getPokemon = async () => {\r\n      let url = \"https://pokeapi.co/api/v2/pokemon?offset=0&limit=100\";\r\n      let pokemons = [];\r\n      let json = { next: 2 };\r\n      while (json.next != null) {\r\n        let res = await fetch(url);\r\n        json = await res.json();\r\n        json.results.forEach(async (element) => {\r\n          let res = await fetch(element.url),\r\n            json = await res.json();\r\n\r\n          let poke = {\r\n            name: element.name,\r\n            avatar: json.sprites.front_default,\r\n          };\r\n          pokemons.push(poke);\r\n        });\r\n        setPokemones([...pokemones, ...pokemons]);\r\n\r\n        url = json.next;\r\n\r\n        if (json.next == null) {\r\n          setLoading(false);\r\n        }\r\n      }\r\n    };\r\n    getPokemon();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    pokemones.forEach((e) => {\r\n      if (e.name == nombre) {\r\n        setPokemon(e);\r\n      }\r\n    });\r\n  }, [nombre]);\r\n\r\n  const handleChangeInput = (e) => {\r\n    setNombre(e.target.value.toLowerCase());\r\n  };\r\n  return (\r\n    <Fragment>\r\n     {loading &&  <div className=\"container-loader\">\r\n      <div className=\"loader\"></div>\r\n      <p>Obteniendo pokemones...</p>\r\n      </div>}\r\n  \r\n    <div className=\"container\">\r\n  \r\n\r\n     \r\n      <h1>Busca tu pokem√≥n!</h1>\r\n\r\n      <input\r\n        placeholder=\"Nombre del pokemon\"\r\n        type=\"search\"\r\n        onChange={handleChangeInput}\r\n      />\r\n      {pokemon != null && <p>{pokemon.name}</p>}\r\n      {pokemon != null && <img src={pokemon.avatar} />}\r\n    </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default ListaPokemones;\r\n","\nimport './App.css';\nimport ListaPokemones from './components/ListaPokemones'\nfunction App() {\n  return (\n    <ListaPokemones></ListaPokemones>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}